<launch>
  <arg name="viewer" default="false" /> <!-- Must be globally qualified -->
  <arg name="manager" default="manager" /> <!-- Must be globally qualified -->
  <arg name="respawn" default="false" />
  <!-- TODO Arguments for debayer, interpolation methods? -->

  <arg     if="$(arg respawn)" name="bond" value="" />
  <arg unless="$(arg respawn)" name="bond" value="--no-bond" />

  <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" output="screen" />

  <!-- arguments for camera param uri -->
  <arg name="camera_info_file_right" default="$(find ps4eye)/camera_info/right.yaml" />
  <arg name="camera_info_file_left" default="$(find ps4eye)/camera_info/left.yaml" />
  <arg name="camera_info_url_default" default="file://$(find ps4eye)/camera_info/default.yaml" />
  <arg name="camera_info_url_right" default="file://$(arg camera_info_file_right)" />
  <arg name="camera_info_url_left" default="file://$(arg camera_info_file_left)" />

  <!-- arguments for tf coords -->
  <arg name="parent_frame" default="/map" />
  <arg name="parent_transform" default="0 0 1 -1.57 0 -1.57" />

  <!-- This launchfile should bring up a node that broadcasts a ros image transport on /webcam/image_raw -->
  <arg name="load_driver" default="true" />
  <arg name="device" default="/dev/video1"/>

  <!-- The GStreamer framerate needs to be an integral fraction -->
  <arg name="fps" default="60/1"/>

  <!-- Available resolution should be 3448x808, 1748x408,1744x408,898x200,896x200 -->
  <arg name="width" default="1748"/>
  <arg name="height" default="408"/>
  <!-- <arg name="width" default="898"/> -->
  <!-- <arg name="height" default="200"/> -->

  <!-- unused arg to set an unknown or unexisting parameter...? -->
  <arg name="PUBLISH_FRAME" default="false"/>

  <node name="gscam_driver" pkg="nodelet" type="nodelet" args="load gscam/GSCamNodelet $(arg manager)" output="screen" if="$(arg load_driver)">
    <param name="camera_name" value="default"/>
    <param name="gscam_config" value="v4l2src device=$(arg device) ! video/x-raw-yuv,framerate=$(arg fps),width=$(arg width),height=$(arg height) ! ffmpegcolorspace"/>
    <param name="frame_id" value="/ps4eye_frame"/>
    <param name="sync_sink" value="true"/>
    <param name="camera_info_url" value="$(arg camera_info_url_default)" />
  </node>

  <!-- Split image to right and left image -->
  <!-- right -->
  <node pkg="nodelet" type="nodelet" name="split_right" args="load image_proc/crop_decimate $(arg manager)">
    <param name="camera_info_url" value="$(arg camera_info_url_right)" />
    <param name="queue_size" type="int" value="10" />
    <param name="x_offset" type="int" value="48" />
    <param name="y_offset" type="int" value="0" />
    <param name="width" type="int" value="640" />
    <param name="height" type="int" value="400" />
    <param name="camera_name" value="right"/>
    <!-- remap output to right image -->
    <remap from="camera_out/image_raw" to="/stereo/right/image_raw" />
    <!-- Dont use original camera info -->
    <!-- null is written in camera_info_publisher.py in ps4eye package -->
    <remap from="/stereo/right/camera_info" to="/null/right/camera_info" />
  </node>
  <!-- left -->
  <node pkg="nodelet" type="nodelet" name="split_left" args="load image_proc/crop_decimate $(arg manager)">
    <param name="camera_info_url" value="$(arg camera_info_url_left)" />
    <param name="queue_size" type="int" value="10" />
    <param name="x_offset" type="int" value="688" />
    <param name="y_offset" type="int" value="0" />
    <param name="width" type="int" value="640" />
    <param name="height" type="int" value="400" />
    <param name="camera_name" value="left"/>
    <!-- remap output to left image -->
    <remap from="camera_out/image_raw" to="/stereo/left/image_raw" />
    <!-- Dont use original camera info -->
    <remap from="/stereo/left/camera_info" to="/null/left/camera_info" />
  </node>

  <!-- publish tf from map to ps4eye_frame -->
  <arg name="PUBLISH_TF" default="true" />
  <node name="camera_transform" pkg="tf" type="static_transform_publisher" args="$(arg parent_transform) $(arg parent_frame) /ps4eye_frame 10" if="$(arg PUBLISH_TF)"/>

  <!-- This node publish /stereo namespaced topic from /null namespaced topic -->
  <node pkg="ps4eye" type="camera_info_publisher.py" name="camera_info_publisher" >
    <param name="left_file_name"  value="$(arg camera_info_file_left)"  />
    <param name="right_file_name" value="$(arg camera_info_file_right)" />
    <!-- null is written in camera_info_publisher.py in ps4eye package -->
    <!-- <remap from="/null/right/camera_info" to="/stereo/right/camera_info" /> -->
    <!-- <remap from="/null/left/camera_info" to="/stereo/left/camera_info" /> -->
  </node>

  <group ns="stereo">
    <include file="$(find stereo_image_proc)/launch/stereo_image_proc.launch">
      <arg name="manager" value="/$(arg manager)" />
    </include>
  </group>

  <!-- start viewer -->
  <node name="stereo_view" pkg="image_view" type="stereo_view" args="stereo:=/stereo image:=image_rect_color" if="$(arg viewer)"/>

  <!-- RTAB-Map -->
  <!--
      Demo of outdoor stereo mapping.
      From bag:
      $ rosbag record
      /stereo_camera/left/image_raw_throttle/compressed
      /stereo_camera/right/image_raw_throttle/compressed
      /stereo_camera/left/camera_info_throttle
      /stereo_camera/right/camera_info_throttle
      /tf
      $ roslaunch rtabmap demo_stereo_outdoor.launch
      $ rosbag play -.-clock stereo_oudoorA.bag
  -->
  <!-- Real or Simulation -->
  <param name="use_sim_time" type="bool" value="False"/>

  <!-- Choose visualization -->
  <arg name="rviz" default="true" />
  <arg name="rtabmapviz" default="false" />

  <!-- Corresponding config files -->
  <arg name="rtabmapviz_cfg" default="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" />
  <arg name="rviz_cfg" default="-d $(find rtabmap_ros)/launch/config/rgbd.rviz" />

  <!-- Localization-only mode -->
  <arg name="localization" default="false"/>

  <!-- Args for config -->
  <arg name="frame_id" default="ps4eye_frame"/>     <!-- Fixed frame id, you may set "base_link" or "base_footprint" if they are published -->
  <arg name="time_threshold" default="0"/>             <!-- (ms) If not 0 ms, memory management is used to keep processing time on this fixed limit. -->
  <arg name="optimize_from_last_node" default="false"/>         <!-- Optimize the map from the last node. Should be true on multi-session mapping and when time threshold is set -->
  <arg name="database_path" default="~/.ros/rtabmap.db"/>
  <arg name="rtabmap_args" default="--delete_db_on_start"/>              <!-- delete_db_on_start, udebug -->
  <arg name="launch_prefix" default=""/>

  <arg name="stereo_namespace" default="/stereo"/>
  <arg name="left_image_topic" default="$(arg stereo_namespace)/left/image_rect_color" />
  <arg name="right_image_topic" default="$(arg stereo_namespace)/right/image_rect" />      <!-- using grayscale image for efficiency -->
  <arg name="left_camera_info_topic" default="$(arg stereo_namespace)/left/camera_info" />
  <arg name="right_camera_info_topic" default="$(arg stereo_namespace)/right/camera_info" />
  <arg name="approximate_sync" default="false"/>         <!-- if timestamps of the stereo images are not synchronized -->
  <arg name="compressed" default="false"/>
  <arg name="convert_depth_to_mm" default="true"/>

  <arg name="subscribe_scan" default="false"/>         <!-- Assuming 2D scan if set, rtabmap will do 3DoF mapping instead of 6DoF -->
  <arg name="scan_topic" default="/scan"/>

  <arg name="subscribe_scan_cloud" default="false"/>         <!-- Assuming 3D scan if set -->
  <arg name="scan_cloud_topic" default="/scan_cloud"/>

  <arg name="visual_odometry" default="true"/>          <!-- Generate visual odometry -->
  <arg name="odom_topic" default="/odom"/>         <!-- Odometry topic used if visual_odometry is false -->

  <arg name="namespace"               default="rtabmap"/>
  <arg name="wait_for_transform"      default="0.2"/>

  <!-- Nodes -->
  <group ns="$(arg namespace)">

    <node if="$(arg compressed)" name="republish_left"  type="republish" pkg="image_transport" args="compressed in:=$(arg left_image_topic) raw out:=$(arg left_image_topic)" />
    <node if="$(arg compressed)" name="republish_right" type="republish" pkg="image_transport" args="compressed in:=$(arg right_image_topic) raw out:=$(arg right_image_topic)" />

    <!-- Odometry -->
    <node if="$(arg visual_odometry)" pkg="rtabmap_ros" type="stereo_odometry" name="stereo_odometry" output="screen" args="$(arg rtabmap_args)" launch-prefix="$(arg launch_prefix)">
      <remap from="left/image_rect" to="$(arg left_image_topic)"/>
      <remap from="right/image_rect" to="$(arg right_image_topic)"/>
      <remap from="left/camera_info" to="$(arg left_camera_info_topic)"/>
      <remap from="right/camera_info" to="$(arg right_camera_info_topic)"/>
      <param name="frame_id" type="string" value="$(arg frame_id)"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
      <param name="approx_sync" type="bool" value="$(arg approximate_sync)"/>
      <param name="Odom/FillInfoData" type="string" value="true"/>
    </node>

    <!-- Visual SLAM (robot side) -->
    <!-- args: "delete_db_on_start" and "udebug" -->
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)" launch-prefix="$(arg launch_prefix)">
      <param name="subscribe_depth" type="bool" value="false"/>
      <param name="subscribe_stereo" type="bool" value="true"/>
      <param name="subscribe_scan" type="bool" value="$(arg subscribe_scan)"/>
      <param name="subscribe_scan_cloud" type="bool" value="$(arg subscribe_scan_cloud)"/>
      <param name="frame_id" type="string" value="$(arg frame_id)"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
      <param name="database_path" type="string" value="$(arg database_path)"/>
      <param name="stereo_approx_sync" type="bool" value="$(arg approximate_sync)"/>

      <remap from="left/image_rect" to="$(arg left_image_topic)"/>
      <remap from="right/image_rect" to="$(arg right_image_topic)"/>
      <remap from="left/camera_info" to="$(arg left_camera_info_topic)"/>
      <remap from="right/camera_info" to="$(arg right_camera_info_topic)"/>
      <remap from="scan" to="$(arg scan_topic)"/>
      <remap from="scan_cloud" to="$(arg scan_cloud_topic)"/>
      <remap unless="$(arg visual_odometry)" from="odom" to="$(arg odom_topic)"/>

      <param name="Rtabmap/TimeThr" type="string" value="$(arg time_threshold)"/>
      <param name="RGBD/OptimizeFromGraphEnd" type="string" value="$(arg optimize_from_last_node)"/>
      <param name="Mem/SaveDepth16Format" type="string" value="$(arg convert_depth_to_mm)"/>

      <!-- localization mode -->
      <param if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
      <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
      <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>

      <!-- when 2D scan is set -->
      <param if="$(arg subscribe_scan)" name="Optimizer/Slam2D" type="string" value="true"/>
      <param if="$(arg subscribe_scan)" name="Icp/CorrespondenceRatio" type="string" value="0.25"/>
      <param if="$(arg subscribe_scan)" name="Reg/Strategy" type="string" value="1"/>
      <param if="$(arg subscribe_scan)" name="Reg/Force3DoF" type="string" value="true"/>

      <!-- when 3D scan is set -->
      <param if="$(arg subscribe_scan_cloud)" name="Reg/Strategy" type="string" value="1"/>
    </node>

    <!-- Visualisation RTAB-Map -->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="$(arg rtabmapviz_cfg)" output="screen" launch-prefix="$(arg launch_prefix)">
      <param name="subscribe_depth"           type="bool"   value="false"/>
      <param name="subscribe_stereo"          type="bool"   value="true"/>
      <param name="subscribe_scan"            type="bool"   value="$(arg subscribe_scan)"/>
      <param name="subscribe_scan_cloud"      type="bool"   value="$(arg subscribe_scan_cloud)"/>
      <param name="subscribe_odom_info"       type="bool"   value="$(arg visual_odometry)"/>
      <param name="frame_id"                  type="string" value="$(arg frame_id)"/>
      <param name="wait_for_transform_duration"   type="double"   value="$(arg wait_for_transform)"/>

      <remap from="left/image_rect"        to="$(arg left_image_topic)"/>
      <remap from="right/image_rect"       to="$(arg right_image_topic)"/>
      <remap from="left/camera_info"       to="$(arg left_camera_info_topic)"/>
      <remap from="right/camera_info"      to="$(arg right_camera_info_topic)"/>
      <remap from="scan"                   to="$(arg scan_topic)"/>
      <remap from="scan_cloud"             to="$(arg scan_cloud_topic)"/>
      <remap unless="$(arg visual_odometry)" from="odom"  to="$(arg odom_topic)"/>
    </node>

  </group>


  <!-- Visualization RVIZ -->
  <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="$(arg rviz_cfg)"/>
  <node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
    <remap from="left/image"        to="$(arg left_image_topic)"/>
    <remap from="right/image"       to="$(arg right_image_topic)"/>
    <remap from="left/camera_info"  to="$(arg left_camera_info_topic)"/>
    <remap from="right/camera_info" to="$(arg right_camera_info_topic)"/>
    <remap from="cloud"             to="voxel_cloud" />

    <param name="decimation"  type="double" value="2"/>
    <param name="voxel_size"  type="double" value="0.02"/>
    <param name="approx_sync" type="bool"   value="$(arg approximate_sync)"/>
  </node>

</launch>

