<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="JAXON" >
  <xacro:include filename="$(find hrpsys_gazebo_samples)/models/JAXON_WH_SENSORS.urdf" />

  <!-- depth camera: from https://github.com/ros-simulation/gazebo_ros_pkgs/issues/210 -->
  <gazebo reference="left_camera_frame">
    <sensor name="openni_depth_camera" type="depth">
      <update_rate>20</update_rate>
      <camera>
        <horizontal_fov>1.09606677025</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>1024</width>
          <height>544</height>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="depth_camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>20</updateRate>
        <cameraName>multisense</cameraName>
        <frameName>left_camera_optical_frame</frameName>
        <depthImageTopicName>depth</depthImageTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>organized_image_points2_color</pointCloudTopicName>
        <!-- prevent from conflicting topic name -->
        <imageTopicName>depth_camera/rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>depth_camera/rgb/camera_info</cameraInfoTopicName>
        <pointCloudCutoff>0.001</pointCloudCutoff>
        <distortion_k1>0.0</distortion_k1>
        <distortion_k2>0.0</distortion_k2>
        <distortion_k3>0.0</distortion_k3>
        <distortion_t1>0.0</distortion_t1>
        <distortion_t2>0.0</distortion_t2>
      </plugin>
    </sensor>
  </gazebo>
  <!-- <gazebo reference="left_camera_frame"> -->
  <!--   <sensor type='depth' name='depth_camera'> -->
  <!--     <camera name='head'> -->
  <!--       <updateRate>30.0</updateRate>         -->
  <!--       <horizontal_fov>1.39626</horizontal_fov> -->
  <!--       <image> -->
  <!--         <width>1024</width> -->
  <!--         <height>544</height> -->
  <!--         <format>R8G8B8</format> -->
  <!--       </image> -->
  <!--       <clip> -->
  <!--         <near>0.02</near> -->
  <!--         <far>300</far> -->
  <!--       </clip> -->
  <!--       <depth_camera> -->
  <!--         <output>depthImage</output> -->
  <!--       </depth_camera> -->
  <!--       <noise> -->
  <!--         <type>gaussian</type> -->
  <!--         <mean>0</mean> -->
  <!--         <stddev>0.007</stddev> -->
  <!--       </noise> -->
  <!--     </camera> -->
  <!--     <plugin name='depth_camera_plugin' filename='libgazebo_ros_depth_camera.so'> -->
  <!--       <alwaysOn>true</alwaysOn> -->
  <!--       <updateRate>0.0</updateRate> -->
  <!--       <depthImageTopicName>depth</depthImageTopicName> -->
  <!--       <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName> -->
  <!--       <cameraName>multisense</cameraName> -->
  <!--       <frameName>left_camera_optical_frame</frameName> -->
  <!--       <pointCloudCutoff>0.001</pointCloudCutoff> -->
  <!--       <imageTopicName>depth_camera/image_raw</imageTopicName> -->
  <!--       <pointCloudTopicName>depth_camera/pointCloud</pointCloudTopicName> -->
  <!--       <colorImageTopic>depth_camera/rgb/image_color</colorImageTopic> -->
  <!--       <depthMapTopic>depth_camera/depth_registered/image_rect</depthMapTopic> -->
  <!--     </plugin> -->
  <!--   </sensor> -->
  <!-- </gazebo> -->
  

  <!-- for multisense: from jsk-ros-pkg/trans_system/multisense_sl_description/urdf/multisense_sl_v4.urdf -->
  <!-- <gazebo reference="head_hokuyo_frame"> -->
  <!--   <sensor type="gpu_ray" name="head_hokuyo_sensor"> -->
  <!--     <visualize>false</visualize> -->
  <!--     <update_rate>40</update_rate> -->
  <!--     <ray> -->
  <!--       <scan> -->
  <!--         <horizontal> -->
  <!--           <samples>1081</samples> -->
  <!--           <resolution>1</resolution> -->
  <!--           <min_angle>-2.356194</min_angle> -->
  <!--           <max_angle>2.356194</max_angle> -->
  <!--         </horizontal> -->
  <!--       </scan> -->
  <!--       <range> -->
  <!--         <min>0.10</min> -->
  <!--         <max>30.0</max> -->
  <!--         <resolution>0.01</resolution> -->
  <!--       </range> -->
  <!--       <noise> -->
  <!--         <type>gaussian</type> -->
  <!--         <\!-- Noise parameters based on published spec for Hokuyo laser -->
  <!--              achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and -->
  <!--              stddev of 0.01m will put 99.7% of samples within 0.03m of the true -->
  <!--              reading. -\-> -->
  <!--         <mean>0.0</mean> -->
  <!--         <stddev>0.01</stddev> -->
  <!--       </noise> -->
  <!--     </ray> -->
  <!--     <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so"> -->
  <!--       <topicName>/multisense/lidar_scan</topicName> -->
  <!--       <frameName>head_hokuyo_frame</frameName> -->
  <!--     </plugin> -->
  <!--   </sensor> -->
  <!-- </gazebo> -->
  <gazebo reference="left_camera_frame">
    <sensor type="multicamera" name="stereo_camera">
      <!-- see MultiSenseSLPlugin.h for available modes -->
      <update_rate>10.0</update_rate>
      <camera name="left">
        <!-- Spec sheet says 80deg X 45deg @ 1024x544pix.  Based on feedback
             from teams, we're instead doing 80deg X 80deg @ 800x800pix. -->
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>1024</width>
          <height>544</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.  
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1].
               The stddev value of 0.007 is based on experimental data 
               from a camera in a Sandia hand pointed at a static scene
               in a couple of different lighting conditions.  -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <camera name="right">
        <pose>0 -0.07 0 0 0 0</pose>
        <!-- Spec sheet says 80deg X 45deg @ 1024x544pix. -->
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>1024</width>
          <height>544</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.  
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1].
               The stddev value of 0.007 is based on experimental data 
               from a camera in a Sandia hand pointed at a static scene
               in a couple of different lighting conditions.  -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="stereo_camera_controller" filename="libgazebo_ros_multicamera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>multisense</cameraName>
        <imageTopicName>image_rect_color</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>left_camera_optical_frame</frameName>
        <!--<rightFrameName>right_camera_optical_frame</rightFrameName>-->
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <link name="head_imu_link">
    <inertial>
      <mass value="1e-5" />
      <!-- collocate with parent link and remove mass from it -->
      <origin xyz="-0.122993 0.035033383 0.02774" rpy="0 0 0" />
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
  </link>
  <joint name="head_imu_joint" type="fixed">
    <parent link="head"/>
    <child link="head_imu_link"/>
    <!-- putting it at the same z-level as the stereo -->
    <origin xyz="-0.0475 0.035 0.0" rpy="0 0 0"/>
  </joint>
  <gazebo reference="head_imu_link">
    <!-- this is expected to be reparented to head with appropriate offset
         when head_imu_link is reduced by fixed joint reduction -->
    <!-- todo: this is working with gazebo 1.4, need to write a unit test -->
    <sensor name="head_imu_sensor" type="imu">
      <always_on>1</always_on>
      <update_rate>1000.0</update_rate>
      <imu>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters from Boston Dynamics
               (http://gazebosim.org/wiki/Sensor_noise):
                 rates (rad/s): mean=0, stddev=2e-4
                 accels (m/s/s): mean=0, stddev=1.7e-2
                 rate bias (rad/s): 5e-6 - 1e-5
                 accel bias (m/s/s): 1e-1
               Experimentally, simulation provide rates with noise of
               about 1e-3 rad/s and accels with noise of about 1e-1 m/s/s.
               So we don't expect to see the noise unless number of inner iterations
               are increased.

               We will add bias.  In this model, bias is sampled once for rates
               and once for accels at startup; the sign (negative or positive)
               of each bias is then switched with equal probability.  Thereafter,
               the biases are fixed additive offsets.  We choose
               bias means and stddevs to produce biases close to the provided
               data. -->
          <rate>
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </rate>
          <accel>
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libJskMultiSenseSLPlugin.so" name="multisense_plugin"/>
  </gazebo>

  <!-- add IOB plugin -->
  <gazebo>
    <plugin filename="libIOBPlugin.so" name="hrpsys_gazebo_plugin" >
      <robotname>JAXON</robotname>
      <controller>hrpsys_gazebo_configuration</controller>
    </plugin>
  </gazebo>
  <!-- add imu sensor -->
  <gazebo reference="BODY" >
    <sensor name="waist_imu" type="imu">
      <always_on>1</always_on>
      <update_rate>1000.0</update_rate>
      <imu>
        <noise>
          <type>gaussian</type>
          <rate>
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </rate>
          <accel>
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </sensor>
  </gazebo>
  <!-- add force sensor -->
  <gazebo reference="LLEG_JOINT5">
    <provideFeedback>1</provideFeedback>
  </gazebo>
  <gazebo reference="RLEG_JOINT5">
    <provideFeedback>1</provideFeedback>
  </gazebo>
  <gazebo reference="LARM_JOINT7">
    <provideFeedback>1</provideFeedback>
  </gazebo>
  <gazebo reference="RARM_JOINT7">
    <provideFeedback>1</provideFeedback>
  </gazebo>
  <!-- add SetVelPlugin -->
  <gazebo>
    <plugin filename="libSetVelPlugin.so" name="set_vel_plugin" >
      <objname>ROBOT</objname>
      <linkname>BODY</linkname>
    </plugin>
  </gazebo>
  <!-- publish ground_truth_odom -->
  <gazebo>  
    <plugin filename="libgazebo_ros_p3d.so" name="gazebo_ros_p3d_plugin">
      <bodyName>BODY</bodyName>
      <topicName>/ground_truth_odom</topicName>
      <alwaysOn>true</alwaysOn>
      <updateRate>30.0</updateRate>
      <gaussianNoise>0.0</gaussianNoise>
      <frameName>world</frameName>
      <xyzOffset>0 0 0</xyzOffset>
      <rpyOffset>0 0 0</rpyOffset>
    </plugin>
  </gazebo>
</robot>
